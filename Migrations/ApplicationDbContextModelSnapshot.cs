// <auto-generated />
using System;
using ISProject.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace ISProject.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.2");

            modelBuilder.Entity("ISProject.Models.AuctionHeader", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("BeginDate")
                        .HasColumnType("TEXT");

                    b.Property<double>("CurrentPrice")
                        .HasColumnType("REAL");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("TEXT");

                    b.Property<double>("PriceStep")
                        .HasColumnType("REAL");

                    b.Property<bool>("Seen")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SellerId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("SellerId");

                    b.ToTable("AuctionHeader");

                    b.HasData(
                        new
                        {
                            Id = 15,
                            BeginDate = new DateTime(2022, 7, 19, 14, 15, 26, 592, DateTimeKind.Local).AddTicks(1401),
                            CurrentPrice = 1.0,
                            EndDate = new DateTime(2022, 7, 19, 20, 15, 26, 595, DateTimeKind.Local).AddTicks(6786),
                            PriceStep = 1.0,
                            Seen = false,
                            SellerId = "12"
                        },
                        new
                        {
                            Id = 35,
                            BeginDate = new DateTime(2022, 7, 19, 9, 15, 26, 609, DateTimeKind.Local).AddTicks(6983),
                            CurrentPrice = 6.0,
                            EndDate = new DateTime(2022, 7, 19, 9, 15, 26, 609, DateTimeKind.Local).AddTicks(7050),
                            PriceStep = 3.0,
                            Seen = false,
                            SellerId = "32"
                        },
                        new
                        {
                            Id = 55,
                            BeginDate = new DateTime(2022, 7, 19, 9, 15, 26, 623, DateTimeKind.Local).AddTicks(3351),
                            CurrentPrice = 8.0,
                            EndDate = new DateTime(2022, 7, 19, 9, 15, 26, 623, DateTimeKind.Local).AddTicks(3402),
                            PriceStep = 5.0,
                            Seen = false,
                            SellerId = "52"
                        },
                        new
                        {
                            Id = 75,
                            BeginDate = new DateTime(2022, 7, 19, 9, 15, 26, 636, DateTimeKind.Local).AddTicks(6941),
                            CurrentPrice = 10.0,
                            EndDate = new DateTime(2022, 7, 20, 2, 15, 26, 636, DateTimeKind.Local).AddTicks(6989),
                            PriceStep = 7.0,
                            Seen = false,
                            SellerId = "72"
                        },
                        new
                        {
                            Id = 95,
                            BeginDate = new DateTime(2022, 7, 19, 9, 15, 26, 649, DateTimeKind.Local).AddTicks(9314),
                            CurrentPrice = 12.0,
                            EndDate = new DateTime(2022, 7, 20, 4, 15, 26, 649, DateTimeKind.Local).AddTicks(9357),
                            PriceStep = 9.0,
                            Seen = false,
                            SellerId = "92"
                        });
                });

            modelBuilder.Entity("ISProject.Models.AuctionProduct", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("AuctionId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("NotiAuctionId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ProductId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Quantity")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("AuctionId");

                    b.HasIndex("NotiAuctionId");

                    b.HasIndex("ProductId");

                    b.ToTable("AuctionProduct");

                    b.HasData(
                        new
                        {
                            Id = 16,
                            AuctionId = 15,
                            ProductId = 10,
                            Quantity = 1
                        },
                        new
                        {
                            Id = 100006,
                            AuctionId = 15,
                            ProductId = 20,
                            Quantity = 1
                        },
                        new
                        {
                            Id = 36,
                            AuctionId = 35,
                            ProductId = 30,
                            Quantity = 2
                        },
                        new
                        {
                            Id = 300006,
                            AuctionId = 35,
                            ProductId = 40,
                            Quantity = 2
                        },
                        new
                        {
                            Id = 56,
                            AuctionId = 55,
                            ProductId = 50,
                            Quantity = 3
                        },
                        new
                        {
                            Id = 500006,
                            AuctionId = 55,
                            ProductId = 60,
                            Quantity = 3
                        },
                        new
                        {
                            Id = 76,
                            AuctionId = 75,
                            ProductId = 70,
                            Quantity = 4
                        },
                        new
                        {
                            Id = 700006,
                            AuctionId = 75,
                            ProductId = 80,
                            Quantity = 4
                        },
                        new
                        {
                            Id = 96,
                            AuctionId = 95,
                            ProductId = 90,
                            Quantity = 5
                        },
                        new
                        {
                            Id = 900006,
                            AuctionId = 95,
                            ProductId = 100,
                            Quantity = 5
                        });
                });

            modelBuilder.Entity("ISProject.Models.AuctionUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("AuctionId")
                        .HasColumnType("INTEGER");

                    b.Property<double>("LastPriceOffered")
                        .HasColumnType("REAL");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("AuctionId");

                    b.HasIndex("UserId");

                    b.ToTable("AuctionUser");

                    b.HasData(
                        new
                        {
                            Id = 30000007,
                            AuctionId = 35,
                            LastPriceOffered = 4.0,
                            UserId = "41"
                        },
                        new
                        {
                            Id = 37,
                            AuctionId = 35,
                            LastPriceOffered = 6.0,
                            UserId = "31"
                        },
                        new
                        {
                            Id = 77,
                            AuctionId = 75,
                            LastPriceOffered = 10.0,
                            UserId = "71"
                        },
                        new
                        {
                            Id = 97,
                            AuctionId = 95,
                            LastPriceOffered = 12.0,
                            UserId = "91"
                        });
                });

            modelBuilder.Entity("ISProject.Models.Notification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Message")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("NotiDate")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Seen")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SendToUser")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Notification");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Notification");
                });

            modelBuilder.Entity("ISProject.Models.OrderDetails", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("AmountLeft")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Count")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<int?>("NotiBuyId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("NotiSellId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("OrderId")
                        .HasColumnType("INTEGER");

                    b.Property<double>("Price")
                        .HasColumnType("REAL");

                    b.Property<int>("ProductId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("NotiBuyId");

                    b.HasIndex("NotiSellId");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProductId");

                    b.ToTable("OrderDetails");
                });

            modelBuilder.Entity("ISProject.Models.OrderHeader", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("OrderTime")
                        .HasColumnType("TEXT");

                    b.Property<double>("TotalPrice")
                        .HasColumnType("REAL");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("OrderHeader");
                });

            modelBuilder.Entity("ISProject.Models.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Product");

                    b.HasData(
                        new
                        {
                            Id = 10,
                            Description = "Descripcion del producto1",
                            Name = "Producto1"
                        },
                        new
                        {
                            Id = 20,
                            Description = "Descripcion del producto2",
                            Name = "Producto2"
                        },
                        new
                        {
                            Id = 30,
                            Description = "Descripcion del producto3",
                            Name = "Producto3"
                        },
                        new
                        {
                            Id = 40,
                            Description = "Descripcion del producto4",
                            Name = "Producto4"
                        },
                        new
                        {
                            Id = 50,
                            Description = "Descripcion del producto5",
                            Name = "Producto5"
                        },
                        new
                        {
                            Id = 60,
                            Description = "Descripcion del producto6",
                            Name = "Producto6"
                        },
                        new
                        {
                            Id = 70,
                            Description = "Descripcion del producto7",
                            Name = "Producto7"
                        },
                        new
                        {
                            Id = 80,
                            Description = "Descripcion del producto8",
                            Name = "Producto8"
                        },
                        new
                        {
                            Id = 90,
                            Description = "Descripcion del producto9",
                            Name = "Producto9"
                        },
                        new
                        {
                            Id = 100,
                            Description = "Descripcion del producto10",
                            Name = "Producto10"
                        });
                });

            modelBuilder.Entity("ISProject.Models.ProductSale", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("Date")
                        .HasColumnType("TEXT");

                    b.Property<string>("Image")
                        .HasColumnType("TEXT");

                    b.Property<double>("Price")
                        .HasColumnType("REAL");

                    b.Property<int>("ProductId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SellerId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Units")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("SellerId");

                    b.ToTable("ProductSale");

                    b.HasData(
                        new
                        {
                            Id = 1003,
                            Date = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Image = "/images/default.png",
                            Price = 8.0,
                            ProductId = 10,
                            SellerId = "12",
                            Units = 2
                        },
                        new
                        {
                            Id = 2003,
                            Date = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Image = "/images/default.png",
                            Price = 8.0,
                            ProductId = 20,
                            SellerId = "22",
                            Units = 3
                        },
                        new
                        {
                            Id = 3003,
                            Date = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Image = "/images/default.png",
                            Price = 9.0,
                            ProductId = 30,
                            SellerId = "32",
                            Units = 4
                        },
                        new
                        {
                            Id = 4003,
                            Date = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Image = "/images/default.png",
                            Price = 9.0,
                            ProductId = 40,
                            SellerId = "42",
                            Units = 5
                        },
                        new
                        {
                            Id = 5003,
                            Date = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Image = "/images/default.png",
                            Price = 10.0,
                            ProductId = 50,
                            SellerId = "52",
                            Units = 6
                        },
                        new
                        {
                            Id = 6003,
                            Date = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Image = "/images/default.png",
                            Price = 10.0,
                            ProductId = 60,
                            SellerId = "62",
                            Units = 7
                        },
                        new
                        {
                            Id = 7003,
                            Date = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Image = "/images/default.png",
                            Price = 11.0,
                            ProductId = 70,
                            SellerId = "72",
                            Units = 8
                        },
                        new
                        {
                            Id = 8003,
                            Date = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Image = "/images/default.png",
                            Price = 11.0,
                            ProductId = 80,
                            SellerId = "82",
                            Units = 9
                        },
                        new
                        {
                            Id = 9003,
                            Date = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Image = "/images/default.png",
                            Price = 12.0,
                            ProductId = 90,
                            SellerId = "92",
                            Units = 10
                        },
                        new
                        {
                            Id = 10003,
                            Date = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Image = "/images/default.png",
                            Price = 12.0,
                            ProductId = 100,
                            SellerId = "102",
                            Units = 11
                        },
                        new
                        {
                            Id = 80003,
                            Date = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Price = 11.0,
                            ProductId = 10,
                            SellerId = "82",
                            Units = 9
                        });
                });

            modelBuilder.Entity("ISProject.Models.ShoppingCart", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("Count")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ProductSaleID")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("ShoppingCart");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnType("TEXT")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex");

                    b.ToTable("AspNetRoles");

                    b.HasData(
                        new
                        {
                            Id = "a18be9c0Customer",
                            ConcurrencyStamp = "f32d358c-8315-4de2-aca2-9858e54f9a6f",
                            Name = "Customer",
                            NormalizedName = "Customer"
                        },
                        new
                        {
                            Id = "a18be9c0Manager",
                            ConcurrencyStamp = "9c829e8a-5fbd-40d2-80bb-d74938e0722b",
                            Name = "Manager",
                            NormalizedName = "Manager"
                        },
                        new
                        {
                            Id = "a18be9c0Seller",
                            ConcurrencyStamp = "d473c797-4a5e-4278-bf68-9c6debb11628",
                            Name = "Seller",
                            NormalizedName = "Seller"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasColumnType("TEXT")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("TEXT")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("TEXT")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash")
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("TEXT");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("TEXT");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserName")
                        .HasColumnType("TEXT")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex");

                    b.ToTable("AspNetUsers");

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityUser");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");

                    b.HasData(
                        new
                        {
                            UserId = "11",
                            RoleId = "a18be9c0Customer"
                        },
                        new
                        {
                            UserId = "12",
                            RoleId = "a18be9c0Seller"
                        },
                        new
                        {
                            UserId = "21",
                            RoleId = "a18be9c0Customer"
                        },
                        new
                        {
                            UserId = "22",
                            RoleId = "a18be9c0Seller"
                        },
                        new
                        {
                            UserId = "31",
                            RoleId = "a18be9c0Customer"
                        },
                        new
                        {
                            UserId = "32",
                            RoleId = "a18be9c0Seller"
                        },
                        new
                        {
                            UserId = "41",
                            RoleId = "a18be9c0Customer"
                        },
                        new
                        {
                            UserId = "42",
                            RoleId = "a18be9c0Seller"
                        },
                        new
                        {
                            UserId = "51",
                            RoleId = "a18be9c0Customer"
                        },
                        new
                        {
                            UserId = "52",
                            RoleId = "a18be9c0Seller"
                        },
                        new
                        {
                            UserId = "61",
                            RoleId = "a18be9c0Customer"
                        },
                        new
                        {
                            UserId = "62",
                            RoleId = "a18be9c0Seller"
                        },
                        new
                        {
                            UserId = "71",
                            RoleId = "a18be9c0Customer"
                        },
                        new
                        {
                            UserId = "72",
                            RoleId = "a18be9c0Seller"
                        },
                        new
                        {
                            UserId = "81",
                            RoleId = "a18be9c0Customer"
                        },
                        new
                        {
                            UserId = "82",
                            RoleId = "a18be9c0Seller"
                        },
                        new
                        {
                            UserId = "91",
                            RoleId = "a18be9c0Customer"
                        },
                        new
                        {
                            UserId = "92",
                            RoleId = "a18be9c0Seller"
                        },
                        new
                        {
                            UserId = "101",
                            RoleId = "a18be9c0Customer"
                        },
                        new
                        {
                            UserId = "102",
                            RoleId = "a18be9c0Seller"
                        },
                        new
                        {
                            UserId = "21123111111",
                            RoleId = "a18be9c0Manager"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("ISProject.Models.NotiAuction", b =>
                {
                    b.HasBaseType("ISProject.Models.Notification");

                    b.Property<int>("AuctionHeaderID")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Status")
                        .HasColumnType("TEXT");

                    b.HasIndex("AuctionHeaderID");

                    b.HasDiscriminator().HasValue("NotiAuction");
                });

            modelBuilder.Entity("ISProject.Models.NotiBuy", b =>
                {
                    b.HasBaseType("ISProject.Models.Notification");

                    b.Property<int>("OrderHeaderID")
                        .HasColumnType("INTEGER");

                    b.HasIndex("OrderHeaderID");

                    b.HasDiscriminator().HasValue("NotiBuy");
                });

            modelBuilder.Entity("ISProject.Models.NotiRole", b =>
                {
                    b.HasBaseType("ISProject.Models.Notification");

                    b.Property<string>("UserID")
                        .HasColumnType("TEXT");

                    b.HasIndex("UserID");

                    b.HasDiscriminator().HasValue("NotiRole");

                    b.HasData(
                        new
                        {
                            Id = 34,
                            Message = "Customer3 wants to become a Seller",
                            NotiDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Seen = false,
                            SendToUser = "All_A",
                            UserID = "31"
                        },
                        new
                        {
                            Id = 64,
                            Message = "Customer6 wants to become a Seller",
                            NotiDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Seen = false,
                            SendToUser = "All_A",
                            UserID = "61"
                        },
                        new
                        {
                            Id = 94,
                            Message = "Customer9 wants to become a Seller",
                            NotiDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Seen = false,
                            SendToUser = "All_A",
                            UserID = "91"
                        });
                });

            modelBuilder.Entity("ISProject.Models.NotiSell", b =>
                {
                    b.HasBaseType("ISProject.Models.Notification");

                    b.HasDiscriminator().HasValue("NotiSell");
                });

            modelBuilder.Entity("ISProject.Models.User", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUser");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.HasDiscriminator().HasValue("User");

                    b.HasData(
                        new
                        {
                            Id = "11",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "0f89c37e-4805-4d86-9013-989033c3c2c5",
                            Email = "Customer1@fake.com",
                            EmailConfirmed = true,
                            LockoutEnabled = true,
                            NormalizedEmail = "CUSTOMER1@FAKE.COM",
                            NormalizedUserName = "CUSTOMER1@FAKE.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEMGfC+kVi/o66QjDJNGNHGwlztQ6aAOIObLmhsTzfCG9p1yUIL8yyDZLit8H4F10Vw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "6a1d76ff-aaf2-4cbc-90f8-e31fd71ee4b5",
                            TwoFactorEnabled = false,
                            UserName = "Customer1@fake.com",
                            Name = "Customer1"
                        },
                        new
                        {
                            Id = "21",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "6c533e81-d7a3-4d09-b479-e1e6179e249b",
                            Email = "Customer2@fake.com",
                            EmailConfirmed = true,
                            LockoutEnabled = true,
                            NormalizedEmail = "CUSTOMER2@FAKE.COM",
                            NormalizedUserName = "CUSTOMER2@FAKE.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEADO502ZotX8smpAgMRmfrCVZuM6/5G1n/yzlvkWidEPwuda5+hfALiPcLdDc56XBA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "453c7363-2356-4e81-abd6-46b335a13c8c",
                            TwoFactorEnabled = false,
                            UserName = "Customer2@fake.com",
                            Name = "Customer2"
                        },
                        new
                        {
                            Id = "31",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "cb4d2e42-6e07-4bc5-a877-187ceea84c07",
                            Email = "Customer3@fake.com",
                            EmailConfirmed = true,
                            LockoutEnabled = true,
                            NormalizedEmail = "CUSTOMER3@FAKE.COM",
                            NormalizedUserName = "CUSTOMER3@FAKE.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEEBsuncGrPDlAEwTaYO3d017GEfI1KP/Tk0cX0WiXpPRFeqNpyXp+8RaI0VjUDuA9Q==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "303fa543-1837-47f4-a5a7-b3480576be5b",
                            TwoFactorEnabled = false,
                            UserName = "Customer3@fake.com",
                            Name = "Customer3"
                        },
                        new
                        {
                            Id = "41",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "5849a75a-6fea-4cc2-b057-d122b3120a7e",
                            Email = "Customer4@fake.com",
                            EmailConfirmed = true,
                            LockoutEnabled = true,
                            NormalizedEmail = "CUSTOMER4@FAKE.COM",
                            NormalizedUserName = "CUSTOMER4@FAKE.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEPcC+SEEvBArGM9u1uh7HQzTxWvPlsuQQPX0kWDfLaRGD/xHaIf6soMON8uW1FhoKA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "21b70497-1fd4-4941-bf20-61bff05d0eec",
                            TwoFactorEnabled = false,
                            UserName = "Customer4@fake.com",
                            Name = "Customer4"
                        },
                        new
                        {
                            Id = "51",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "b524413e-3f24-4485-9eba-905c0780ece5",
                            Email = "Customer5@fake.com",
                            EmailConfirmed = true,
                            LockoutEnabled = true,
                            NormalizedEmail = "CUSTOMER5@FAKE.COM",
                            NormalizedUserName = "CUSTOMER5@FAKE.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEKdBgBVOr8y7rCJjM2ajFw7AHYpH3Hw/dfZKeDQV3xOePqRuwAOE8vFIy2tBaWjZ7g==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "2dd6750a-41e8-432a-9920-83ab8b07c398",
                            TwoFactorEnabled = false,
                            UserName = "Customer5@fake.com",
                            Name = "Customer5"
                        },
                        new
                        {
                            Id = "61",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "bf1cd123-6f10-4ac7-b9f9-a21023de8ad0",
                            Email = "Customer6@fake.com",
                            EmailConfirmed = true,
                            LockoutEnabled = true,
                            NormalizedEmail = "CUSTOMER6@FAKE.COM",
                            NormalizedUserName = "CUSTOMER6@FAKE.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEB1OkcROfw6jEBDNy1Z1rUgTtDf07y0Y0gmA9WLSblAu+Tc5i1BZ2kTIqNut6earKw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "3a85634a-cb22-4ced-aa3b-e7f2bd15fdc8",
                            TwoFactorEnabled = false,
                            UserName = "Customer6@fake.com",
                            Name = "Customer6"
                        },
                        new
                        {
                            Id = "71",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "10474a2e-c1b6-4308-b786-a040e1c648f5",
                            Email = "Customer7@fake.com",
                            EmailConfirmed = true,
                            LockoutEnabled = true,
                            NormalizedEmail = "CUSTOMER7@FAKE.COM",
                            NormalizedUserName = "CUSTOMER7@FAKE.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEN2FECoKuzVgAICxFgCGHRC8h5IUk3O1nZD/rTpbkj7IqRFHvUrzfRAh9FTkkb4CLg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "aefd8fce-0085-46fe-90d4-2c760973e839",
                            TwoFactorEnabled = false,
                            UserName = "Customer7@fake.com",
                            Name = "Customer7"
                        },
                        new
                        {
                            Id = "81",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "5935b56d-8595-485a-ac1c-74dc85bc458c",
                            Email = "Customer8@fake.com",
                            EmailConfirmed = true,
                            LockoutEnabled = true,
                            NormalizedEmail = "CUSTOMER8@FAKE.COM",
                            NormalizedUserName = "CUSTOMER8@FAKE.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEDBGGuTwn5XkN/oBenyd5cVI8ZMh9+6csI3DbIsnsITWbMuWFEKokMTmCcGkxJMbhQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "c5374063-c269-45a6-b346-998460c81054",
                            TwoFactorEnabled = false,
                            UserName = "Customer8@fake.com",
                            Name = "Customer8"
                        },
                        new
                        {
                            Id = "91",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "e26b6766-f0ac-4435-89d2-69e7b941caa0",
                            Email = "Customer9@fake.com",
                            EmailConfirmed = true,
                            LockoutEnabled = true,
                            NormalizedEmail = "CUSTOMER9@FAKE.COM",
                            NormalizedUserName = "CUSTOMER9@FAKE.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAENEgoIzZV+y20XKlsZOgEviZ1Pi6mub+UWoeGhWb701gRTEKl4Utxhm2lr5i+BC+BQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "269ac44c-fa06-4736-a407-06d2c5c64676",
                            TwoFactorEnabled = false,
                            UserName = "Customer9@fake.com",
                            Name = "Customer9"
                        },
                        new
                        {
                            Id = "101",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "2c6929a6-a7e5-4123-a967-83619bf41340",
                            Email = "Customer10@fake.com",
                            EmailConfirmed = true,
                            LockoutEnabled = true,
                            NormalizedEmail = "CUSTOMER10@FAKE.COM",
                            NormalizedUserName = "CUSTOMER10@FAKE.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEJIofSBvpn7q4vK6fr6qqBX40h9BtcpEW4kAcOq47GS/nWkcSJpk5zLxn/OYaHSRgw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "935bd5e7-5ae3-4eec-8867-f536188a1f51",
                            TwoFactorEnabled = false,
                            UserName = "Customer10@fake.com",
                            Name = "Customer10"
                        });
                });

            modelBuilder.Entity("ISProject.Models.Seller", b =>
                {
                    b.HasBaseType("ISProject.Models.User");

                    b.Property<int>("Rating")
                        .HasColumnType("INTEGER");

                    b.HasDiscriminator().HasValue("Seller");

                    b.HasData(
                        new
                        {
                            Id = "12",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "d9f9376a-b588-441b-bee4-b042ee60866e",
                            Email = "Seller1@fake.com",
                            EmailConfirmed = true,
                            LockoutEnabled = true,
                            NormalizedEmail = "SELLER1@FAKE.COM",
                            NormalizedUserName = "SELLER1@FAKE.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEDaQnYN1tr8rHx8KiSvY/7LOaJdRR537uaPhIq16fJuy6MmRc1vNqzzBCYu5Zlz0NA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "856f6722-99ed-4515-98d8-b4ff6959a7cb",
                            TwoFactorEnabled = false,
                            UserName = "Seller1@fake.com",
                            Name = "Seller1",
                            Rating = 0
                        },
                        new
                        {
                            Id = "22",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "205cb0a7-124a-49d9-bd80-df538999176e",
                            Email = "Seller2@fake.com",
                            EmailConfirmed = true,
                            LockoutEnabled = true,
                            NormalizedEmail = "SELLER2@FAKE.COM",
                            NormalizedUserName = "SELLER2@FAKE.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEHAbY+fVv1YV2QDFIAypErA7ZpJNDDrdu9lqf+mTmUkJtC5lLMi+NehuJXFcN3IuNg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "fa48e0a7-febb-497f-82f5-7b05f4394e29",
                            TwoFactorEnabled = false,
                            UserName = "Seller2@fake.com",
                            Name = "Seller2",
                            Rating = 0
                        },
                        new
                        {
                            Id = "32",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "1dbf2993-3c4e-4dd3-b6f8-55b9f3f8d7c4",
                            Email = "Seller3@fake.com",
                            EmailConfirmed = true,
                            LockoutEnabled = true,
                            NormalizedEmail = "SELLER3@FAKE.COM",
                            NormalizedUserName = "SELLER3@FAKE.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEE7oFSxgFGPMnSpBLGi57SxuHuKVLf3r04ep4kBqVPOCi+t5FBW8GGke+uo/vVP1lg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "7f32faba-e59d-43e6-bcea-dc63dcc6b4d4",
                            TwoFactorEnabled = false,
                            UserName = "Seller3@fake.com",
                            Name = "Seller3",
                            Rating = 0
                        },
                        new
                        {
                            Id = "42",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "0470249a-cc3d-4dbb-ba37-3f26174e334e",
                            Email = "Seller4@fake.com",
                            EmailConfirmed = true,
                            LockoutEnabled = true,
                            NormalizedEmail = "SELLER4@FAKE.COM",
                            NormalizedUserName = "SELLER4@FAKE.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEORzS3f9vdn7qXg5h6q1UT0RsJjmqtmIXCBprjiRumpQxxULbx/S6mzqTFZg3n/Gag==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "b9e26c1b-66b2-4d21-a5b1-fbcc1ae58433",
                            TwoFactorEnabled = false,
                            UserName = "Seller4@fake.com",
                            Name = "Seller4",
                            Rating = 0
                        },
                        new
                        {
                            Id = "52",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "a4777c4d-5e58-45ea-a138-ee52f2c2b14b",
                            Email = "Seller5@fake.com",
                            EmailConfirmed = true,
                            LockoutEnabled = true,
                            NormalizedEmail = "SELLER5@FAKE.COM",
                            NormalizedUserName = "SELLER5@FAKE.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAENFzbrJWE9vf1/Xc/h1LTj8IAOo3SX+5wXkYefm9BJv7cwSxMWGmyF3DFrHXwO2nKg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "b63b562f-3a9e-4f2f-b561-bd8c187d33a8",
                            TwoFactorEnabled = false,
                            UserName = "Seller5@fake.com",
                            Name = "Seller5",
                            Rating = 0
                        },
                        new
                        {
                            Id = "62",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "4f70a730-f674-460e-9ff0-971a26679c57",
                            Email = "Seller6@fake.com",
                            EmailConfirmed = true,
                            LockoutEnabled = true,
                            NormalizedEmail = "SELLER6@FAKE.COM",
                            NormalizedUserName = "SELLER6@FAKE.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEAzFdGX0uViVxW91uQIoyW4GnwpnKHzuASpNe49sRWaRUYT36BIlJrARpOyOaCwqZw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "8bb6facf-8d58-4c58-896a-b32ad3d552ce",
                            TwoFactorEnabled = false,
                            UserName = "Seller6@fake.com",
                            Name = "Seller6",
                            Rating = 0
                        },
                        new
                        {
                            Id = "72",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "7090cd44-e909-4867-ac03-51d33c65e30b",
                            Email = "Seller7@fake.com",
                            EmailConfirmed = true,
                            LockoutEnabled = true,
                            NormalizedEmail = "SELLER7@FAKE.COM",
                            NormalizedUserName = "SELLER7@FAKE.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAENaSPdtl0oQ5ECWuJCfXowPfdRvPuNlPL2Hvf2pPLQCyGDbMJWj9kFfgydjjHhWV4g==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "696d3595-f8ae-474c-bf45-3343a564df7c",
                            TwoFactorEnabled = false,
                            UserName = "Seller7@fake.com",
                            Name = "Seller7",
                            Rating = 0
                        },
                        new
                        {
                            Id = "82",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "f3756405-d1c1-4d32-b00c-016bff8fb68d",
                            Email = "Seller8@fake.com",
                            EmailConfirmed = true,
                            LockoutEnabled = true,
                            NormalizedEmail = "SELLER8@FAKE.COM",
                            NormalizedUserName = "SELLER8@FAKE.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAECLnfzOW8Eh2dr0NMxAU0ajKiQp3Bwh2LOxdenB33mAtDu/Gp9tDA3accp9F3jiH6w==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "fba80139-6131-4928-954e-8fb15161442d",
                            TwoFactorEnabled = false,
                            UserName = "Seller8@fake.com",
                            Name = "Seller8",
                            Rating = 0
                        },
                        new
                        {
                            Id = "92",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "422f045e-fa11-403e-bb0c-03a5c234507b",
                            Email = "Seller9@fake.com",
                            EmailConfirmed = true,
                            LockoutEnabled = true,
                            NormalizedEmail = "SELLER9@FAKE.COM",
                            NormalizedUserName = "SELLER9@FAKE.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEIsGgB6epNIpnnq3RP2a3PJtcxHGX141MviB2RpEypR5/PW9detTMIT/Rx0w9e2T4Q==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "9b440a3c-4353-4233-b201-80beadd376ad",
                            TwoFactorEnabled = false,
                            UserName = "Seller9@fake.com",
                            Name = "Seller9",
                            Rating = 0
                        },
                        new
                        {
                            Id = "102",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "73ec1d8c-cbbb-4211-8769-c2f007c9d633",
                            Email = "Seller10@fake.com",
                            EmailConfirmed = true,
                            LockoutEnabled = true,
                            NormalizedEmail = "SELLER10@FAKE.COM",
                            NormalizedUserName = "SELLER10@FAKE.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEKIdIM9ivTKMVUS2zo7rC7hlUdQsA57eBDTSjem1Jw7M83Duf0NSr23UyNqvJ/B7WQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "e458ce10-acd1-4801-ab5d-5a7868b95c35",
                            TwoFactorEnabled = false,
                            UserName = "Seller10@fake.com",
                            Name = "Seller10",
                            Rating = 0
                        },
                        new
                        {
                            Id = "21123111111",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "e9491515-dace-4e30-8795-be9c6fb6a165",
                            Email = "admin@fake.com",
                            EmailConfirmed = true,
                            LockoutEnabled = true,
                            NormalizedEmail = "ADMIN@FAKE.COM",
                            NormalizedUserName = "ADMIN@FAKE.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEH2FdReimaM3Z3ccUEYezxDOCPs6HShekEWTbCQqiG2ECBEfay9+UixfR2hhR4ZVWg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "bfdb3126-4bcb-4949-ae95-09be2456a6ec",
                            TwoFactorEnabled = false,
                            UserName = "admin@fake.com",
                            Name = "admin",
                            Rating = 0
                        });
                });

            modelBuilder.Entity("ISProject.Models.AuctionHeader", b =>
                {
                    b.HasOne("ISProject.Models.Seller", "User")
                        .WithMany()
                        .HasForeignKey("SellerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ISProject.Models.AuctionProduct", b =>
                {
                    b.HasOne("ISProject.Models.AuctionHeader", "AuctionHeader")
                        .WithMany()
                        .HasForeignKey("AuctionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ISProject.Models.NotiAuction", null)
                        .WithMany("AuctionProduct")
                        .HasForeignKey("NotiAuctionId");

                    b.HasOne("ISProject.Models.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ISProject.Models.AuctionUser", b =>
                {
                    b.HasOne("ISProject.Models.AuctionHeader", "AuctionHeader")
                        .WithMany()
                        .HasForeignKey("AuctionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ISProject.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ISProject.Models.OrderDetails", b =>
                {
                    b.HasOne("ISProject.Models.NotiBuy", null)
                        .WithMany("OrderDetails")
                        .HasForeignKey("NotiBuyId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("ISProject.Models.NotiSell", null)
                        .WithMany("OrderDetails")
                        .HasForeignKey("NotiSellId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("ISProject.Models.OrderHeader", "OrderHeader")
                        .WithMany()
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ISProject.Models.ProductSale", "ProductSale")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ISProject.Models.OrderHeader", b =>
                {
                    b.HasOne("ISProject.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ISProject.Models.ProductSale", b =>
                {
                    b.HasOne("ISProject.Models.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ISProject.Models.Seller", "Seller")
                        .WithMany()
                        .HasForeignKey("SellerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ISProject.Models.NotiAuction", b =>
                {
                    b.HasOne("ISProject.Models.AuctionHeader", "AuctionHeader")
                        .WithMany()
                        .HasForeignKey("AuctionHeaderID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ISProject.Models.NotiBuy", b =>
                {
                    b.HasOne("ISProject.Models.OrderHeader", "OrderHeader")
                        .WithMany()
                        .HasForeignKey("OrderHeaderID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ISProject.Models.NotiRole", b =>
                {
                    b.HasOne("ISProject.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserID");
                });
#pragma warning restore 612, 618
        }
    }
}
